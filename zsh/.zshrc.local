# Prompt
## Custom Fields
function virtual_env_prompt () {
	REPLY=${VIRTUAL_ENV+(${VIRTUAL_ENV:t}) }
}
grml_theme_add_token virtual-env -f virtual_env_prompt '%F{magenta}' '%f'
grml_theme_add_token host_full '%M ' '' ''
grml_theme_add_token existing-jobs '%(1j.[%j running job(s)].)' '%F{cyan}' '%f'

function calc_prompt_length () {
	items=(rc user at host_full path time date)
	count=0
	for item in ${items[@]}; do
		((count+=${#${(%)grml_prompt_token_default[$item]}}))
	done

	# VCS
	cleaned_vcs=`echo $vcs_info_msg_0_ | sed -e 's/%F{[^}]*}//g' -e 's/%f//g'`
	((count+=${#cleaned_vcs}))

	# Virtual env
	((count+=${#${VIRTUAL_ENV+(${VIRTUAL_ENV:t}) }}))
	echo $count
}

function gen_spaces () {
	space_length=$1
	if [ $space_length -lt 0 ]; then
		space_length=0
	fi

	spaces=""
	for _ in `seq $space_length`; do
		spaces+=" "
	done
	echo $spaces
}

function gen_padding () {
	prompt_length=$(calc_prompt_length)
	((space_length=$COLUMNS-$prompt_length))
	REPLY=$(gen_spaces $space_length)
}

grml_theme_add_token padding -f gen_padding '' ''

zstyle ':prompt:grml:*:items:user' pre '%F{red}'
zstyle ':prompt:grml:*:items:host_full' pre '%F{cyan}'
zstyle ':prompt:grml:*:items:path' pre '%F{yellow}'
zstyle ':prompt:grml:*:items:percent' pre '%f'
zstyle ':prompt:grml:left:setup' items user at host_full path virtual-env vcs padding time date newline rc percent
zstyle ':prompt:grml:right:setup' items shell-level existing-jobs sad-smiley

# Variables
if command -v nvim &> /dev/null; then
	export EDITOR=nvim
	export SUDO_EDITOR=nvim
	export GIT_EDITOR=nvim
elif command -v vim &> /dev/null; then
	export EDITOR=vim
	export SUDO_EDITOR=vim
	export GIT_EDITOR=vim
fi

if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
	export SSH_AUTH_SOCK=$HOME/.ssh/ssh_auth_sock
fi

if command -v ghq &> /dev/null; then
	export DOTFILES=$(ghq root)/$(ghq list | grep "Forest0923/dotfiles")
	export DOTFILES_LOCAL=$(ghq root)/$(ghq list | grep "$USER/dotfiles-local")
else
	export DOTFILES=$HOME/dotfiles
	export DOTFILES_LOCAL=$HOME/dotfiles-local
fi

## Path
if [[ -d $DOTFILES/bin ]]; then
	export PATH="$PATH:$DOTFILES/bin"
fi

if [[ -d $DOTFILES_LOCAL/bin ]]; then
	export PATH="$PATH:$DOTFILES_LOCAL/bin"
fi

[[ -r $HOME/.cargo/env ]] && . "$HOME/.cargo/env"
[[ -r $HOME/.opam/opam-init/init.zsh ]] && source $HOME/.opam/opam-init/init.zsh  &> /dev/null

if [[ -d $HOME/.local/bin ]] && [[ ! ":$PATH:" =~ .*:"$HOME/.local/bin":.* ]]; then
	export PATH="$HOME/.local/bin:$PATH"
fi

if [[ -d $HOME/.cargo/bin ]] && [[ ! ":$PATH:" =~ .*:"$HOME/.cargo/bin":.* ]]; then
	export PATH="$HOME/.cargo/bin:$PATH"
fi

if [ -f /usr/share/nvm/init-nvm.sh ]; then
	source /usr/share/nvm/init-nvm.sh
fi

# OS specific conf
case `uname -s` in
	"Darwin")
		[[ -r $HOME/.zshrc.osx ]] && . $HOME/.zshrc.osx
		;;
	"Linux")
		[[ -r $HOME/.zshrc.linux ]] && . $HOME/.zshrc.linux
		case `uname -r` in
			*"microsoft"*)
				[[ -r $HOME/.zshrc.wsl ]] && . $HOME/.zshrc.wsl
				;;
			*"valve"*)
				[[ -r $HOME/.zshrc.steamos ]] && . $HOME/.zshrc.steamos
				;;
			*);;
		esac
		;;
	*);;
esac

# Completion
## fzf
if command -v fzf &> /dev/null; then
	source <(fzf --zsh)
fi
## kubectl
if command -v kubectl &> /dev/null; then
	source <(kubectl completion zsh 2>/dev/null)
fi
## molecule
# eval "$(_MOLECULE_COMPLETE=zsh_source molecule)"

# Aliases
if command -v eza &> /dev/null; then
	alias ls='eza'
	alias l='eza -l --git'
	alias ll='eza -l --git'
	alias lh='eza -lh --git'
	alias la='eza -lah --git'
	alias tree='eza -T'
elif command -v exa &> /dev/null; then
	alias ls='exa'
	alias l='exa -l --git'
	alias ll='exa -l --git'
	alias lh='exa -lh --git'
	alias la='exa -lah --git'
	alias tree='exa -T'
else
	alias ls='ls --color=auto'
	alias l='ls -l --color=auto'
	alias ll='ls -l --color=auto'
	alias lh='ls -lh --color=auto'
	alias la='ls -lah --color=auto'
fi

if command -v bat &> /dev/null ; then
	alias cat='bat --theme ansi'
fi

if !command -v hostname &> /dev/null; then
	alias hostname='/bin/cat /etc/hostname; echo'
fi

alias up='cd ..'
alias refsh='exec zsh -l'
alias neofetch='curl -s https://raw.githubusercontent.com/dylanaraps/neofetch/master/neofetch | bash'
alias print256colours='curl -s https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/e50a28ec54188d2413518788de6c6367ffcea4f7/print256colours.sh | bash'

if command -v ghq &> /dev/null ; then
	if command -v fzf &> /dev/null; then
		alias cdghq='cd $(ghq root); cd $(ghq list | fzf)'
		alias updghq='cd $(ghq root); ghq get -u $(ghq list | fzf)'
	else
		alias cdghq='cd $(ghq root); ghq list'
	fi
fi

# Functions
supp() {
	"$@" &> /dev/null < /dev/null
}

if command -v yt-dlp &> /dev/null; then
	youtube_mp3() {
		yt-dlp $1 -f bestaudio --extract-audio
	}
	youtube_mp4() {
		yt-dlp $1 -f "bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4]"
	}
fi

ssh-add-keys() {
	if ! pgrep ssh-agent > /dev/null 2>&1; then
		eval "$(ssh-agent -s)"
	fi
	find ~/.ssh -type f -name "id_*" -not -name "*.pub" | xargs ssh-add
}

wol_home() {
	if [ -f $DOTFILES_LOCAL/config/config.toml ]; then
		$DOTFILES/scripts/wol.py
		echo "Magic packet is sended!"
	else
		echo "Config file doesn't exist!"
	fi
}

ipmitool_on() {
	if ! command -v ipmitool &> /dev/null; then
		echo "ipmitool not found"
		return 1
	fi
	if [ $# = 0 ]; then
		echo "Please specify hostname"
		return 1
	fi
	$DOTFILES/scripts/ipmitool.py $1 "on"
}

ipmitool_off() {
	if ! command -v ipmitool &> /dev/null; then
		echo "ipmitool not found"
		return 1
	fi
	if [ $# = 0 ]; then
		echo "Please specify hostname"
		return 1
	fi
	$DOTFILES/scripts/ipmitool.py $1 "off"
}
